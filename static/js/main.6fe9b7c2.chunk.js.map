{"version":3,"sources":["component/Header/Header.js","component/Presentation/Presentation.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","id","className","Presentation","App","component_Header_Header","component_Presentation_Presentation","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAWeA,SATA,WACd,OACCC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UACPH,EAAAC,EAAAC,cAAA,MAAIC,GAAG,QAAQC,UAAU,mBAAzB,QADD,IACsDJ,EAAAC,EAAAC,cAAA,WACrDF,EAAAC,EAAAC,cAAA,QAAME,UAAU,oBAAhB,0CCeYC,EAnBM,WACpB,OACCL,EAAAC,EAAAC,cAAA,OAAKC,GAAG,gBACPH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACdJ,EAAAC,EAAAC,cAAA,MAAIC,GAAG,QAAQC,UAAU,8BAAzB,qBADD,IAC8EJ,EAAAC,EAAAC,cAAA,WAC7EF,EAAAC,EAAAC,cAAA,KAAGE,UAAU,0BAAb,yYASDJ,EAAAC,EAAAC,cAAA,WAASE,UAAU,2BAAnB,OCSYE,0LAbX,OACEN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACK,EAAD,MACAP,EAAAC,EAAAC,cAACM,EAAD,cALUC,cCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6fe9b7c2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n\treturn (\r\n\t\t<div id='header'>\r\n\t\t\t<h1 id='title' className='titleFont white'>VERU</h1> <br />\r\n\t\t\t<span className='normalText white'>UX / PRODUCT DESIGN / VISUAL DESIGN</span>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Presentation = () => {\r\n\treturn (\r\n\t\t<div id='Presentation' >\r\n\t\t\t<div className='content'>\r\n\t\t\t\t<h1 id='title' className='titleFont red contentTitle'>About the project</h1> <br />\r\n\t\t\t\t<p className='normalText contentText'>\r\n\t\t\t\t\tVeru wanted to stand out from the competition not only by our business model\r\n\t\t\t\t\tbut also through our brand identity. The first time we talked, the client \r\n\t\t\t\t\texpressed their desire to aim an identity that helped them to set Veru apart \r\n\t\t\t\t\tfrom the other companies. Based on market research and UX data, we found out\r\n\t\t\t\t\tthat there were certain elements that we could take advantage of to reach our\r\n\t\t\t\t\tgoal. \r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t\t<section className='bigImg veru_img01 bgImg'> </section>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Presentation;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './component/Header/Header';\nimport Presentation from './component/Presentation/Presentation';\n// import Role from './component/Role/Role';\n// import Design from './component/Design/Design';\n// import Personas from './component/Personas/Personas';\n// import Vision from './component/Conclusion/Vision';\nimport 'react-image-lightbox/style.css';\n\nclass App extends Component {\n  render () {\n    return (\n      <div>\n        <Header />\n        <Presentation />\n        {/* <Role />\n        <Design />\n        <Personas />\n        <Vision /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}